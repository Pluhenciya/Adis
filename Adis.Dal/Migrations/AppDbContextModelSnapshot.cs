// <auto-generated />
using System;
using Adis.Dal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace Adis.Dal.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Adis.Dm.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_role");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Projecter",
                            NormalizedName = "PROJECTER"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ProjectManager",
                            NormalizedName = "PROJECTMANAGER"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Inspector",
                            NormalizedName = "INSPECTOR"
                        });
                });

            modelBuilder.Entity("Adis.Dm.Comment", b =>
                {
                    b.Property<int>("IdComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_document");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdComment"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("IdSender")
                        .HasColumnType("int")
                        .HasColumnName("id_sender");

                    b.Property<int>("IdTask")
                        .HasColumnType("int")
                        .HasColumnName("id_task");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.HasKey("IdComment")
                        .HasName("PRIMARY");

                    b.HasIndex("IdSender");

                    b.HasIndex("IdTask");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Adis.Dm.Contractor", b =>
                {
                    b.Property<int>("IdContractor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_contractor");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdContractor"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("IdContractor")
                        .HasName("PRIMARY");

                    b.ToTable("contractors", (string)null);
                });

            modelBuilder.Entity("Adis.Dm.Document", b =>
                {
                    b.Property<int>("IdDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_document");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdDocument"));

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("enum('estimate', 'other')")
                        .HasColumnName("type");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("filename");

                    b.Property<int?>("IdTask")
                        .HasColumnType("int")
                        .HasColumnName("id_task");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.HasKey("IdDocument")
                        .HasName("PRIMARY");

                    b.HasIndex("IdTask");

                    b.HasIndex("IdUser");

                    b.ToTable("documents", (string)null);
                });

            modelBuilder.Entity("Adis.Dm.ExecutionTask", b =>
                {
                    b.Property<int>("IdExecutionTask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_execution_task");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdExecutionTask"));

                    b.Property<int>("IdProject")
                        .HasColumnType("int")
                        .HasColumnName("id_project");

                    b.Property<int>("IdWorkObjectSection")
                        .HasColumnType("int")
                        .HasColumnName("id_work_object_section");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_completed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("IdExecutionTask")
                        .HasName("PRIMARY");

                    b.HasIndex("IdProject");

                    b.HasIndex("IdWorkObjectSection");

                    b.ToTable("execution_task", (string)null);
                });

            modelBuilder.Entity("Adis.Dm.Project", b =>
                {
                    b.Property<int>("IdProject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_project");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdProject"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateOnly?>("EndExecutionDate")
                        .HasColumnType("date")
                        .HasColumnName("end_execution_date");

                    b.Property<int?>("IdContractor")
                        .HasColumnType("int")
                        .HasColumnName("id_constractor");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<int>("IdWorkObject")
                        .HasColumnType("int")
                        .HasColumnName("id_location");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<DateOnly?>("StartExecutionDate")
                        .HasColumnType("date")
                        .HasColumnName("start_execution_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("enum('designing', 'contractorSearch', 'inExecution', 'completed')")
                        .HasColumnName("status");

                    b.HasKey("IdProject")
                        .HasName("PRIMARY");

                    b.HasIndex("IdContractor");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdWorkObject");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_projects_status");

                    b.HasIndex("StartDate", "EndDate")
                        .HasDatabaseName("ix_projects_dates");

                    b.ToTable("projects", null, t =>
                        {
                            t.HasCheckConstraint("chk_projects_dates", "start_date <= end_date");
                        });
                });

            modelBuilder.Entity("Adis.Dm.ProjectTask", b =>
                {
                    b.Property<int>("IdTask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_task");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdTask"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int>("IdProject")
                        .HasColumnType("int")
                        .HasColumnName("id_project");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("enum('toDo', 'doing', 'checking', 'completed')")
                        .HasColumnName("status");

                    b.Property<string>("TextResult")
                        .HasColumnType("text")
                        .HasColumnName("text_result");

                    b.HasKey("IdTask")
                        .HasName("PRIMARY");

                    b.HasIndex("IdProject")
                        .HasDatabaseName("ix_id_project");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("Adis.Dm.RefreshToken", b =>
                {
                    b.Property<int>("IdRefreshToken")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_refresh_token");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdRefreshToken"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("created_by_ip");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime")
                        .HasColumnName("expires_at");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("replaced_by_token");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime")
                        .HasColumnName("revoked_at");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("revoked_by_ip");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("token");

                    b.HasKey("IdRefreshToken")
                        .HasName("PRIMARY");

                    b.HasIndex("IdUser")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_token");

                    b.ToTable("refresh_tokens", null, t =>
                        {
                            t.HasCheckConstraint("chk_refresh_tokens_expiration", "expires_at > created_at");

                            t.HasCheckConstraint("chk_refresh_tokens_revoked", "revoked_at IS NULL OR revoked_at > created_at");
                        });
                });

            modelBuilder.Entity("Adis.Dm.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("full_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("normalized_username");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", null, t =>
                        {
                            t.HasCheckConstraint("chk_users_email_format", "email LIKE '%@%'");
                        });
                });

            modelBuilder.Entity("Adis.Dm.WorkObject", b =>
                {
                    b.Property<int>("IdWorkObject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_work_object");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdWorkObject"));

                    b.Property<Geometry>("Geometry")
                        .IsRequired()
                        .HasColumnType("GEOMETRY")
                        .HasColumnName("geometry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("IdWorkObject")
                        .HasName("PRIMARY");

                    b.HasIndex("Geometry")
                        .HasDatabaseName("ix_work_objects_geometry")
                        .HasAnnotation("MySql:SpatialIndex", true);

                    b.ToTable("work_objects", (string)null);
                });

            modelBuilder.Entity("Adis.Dm.WorkObjectSection", b =>
                {
                    b.Property<int>("IdWorkObjectSection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_work_object_section");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdWorkObjectSection"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("IdWorkObjectSection")
                        .HasName("PRIMARY");

                    b.ToTable("work_object_section", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_role_claims");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("id_role");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_user_claims");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("provider_dysplay_name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("id_role");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("token_name");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("users_check_tasks", b =>
                {
                    b.Property<int>("id_task")
                        .HasColumnType("int")
                        .HasColumnName("id_task");

                    b.Property<int>("id_user")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.HasKey("id_task", "id_user");

                    b.HasIndex("id_user");

                    b.ToTable("users_check_tasks");
                });

            modelBuilder.Entity("users_execute_tasks", b =>
                {
                    b.Property<int>("id_task")
                        .HasColumnType("int")
                        .HasColumnName("id_task");

                    b.Property<int>("id_user")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.HasKey("id_task", "id_user");

                    b.HasIndex("id_user");

                    b.ToTable("users_execute_tasks");
                });

            modelBuilder.Entity("Adis.Dm.Comment", b =>
                {
                    b.HasOne("Adis.Dm.User", "Sender")
                        .WithMany("Comments")
                        .HasForeignKey("IdSender")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_user_comments");

                    b.HasOne("Adis.Dm.ProjectTask", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("IdTask")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_task_comments");

                    b.Navigation("Sender");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Adis.Dm.Document", b =>
                {
                    b.HasOne("Adis.Dm.ProjectTask", "Task")
                        .WithMany("Documents")
                        .HasForeignKey("IdTask")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_documents_task");

                    b.HasOne("Adis.Dm.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_user_documents");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Adis.Dm.ExecutionTask", b =>
                {
                    b.HasOne("Adis.Dm.Project", "Project")
                        .WithMany("ExecutionTasks")
                        .HasForeignKey("IdProject")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_project_execution_tasks");

                    b.HasOne("Adis.Dm.WorkObjectSection", "WorkObjectSection")
                        .WithMany("ExecutionTasks")
                        .HasForeignKey("IdWorkObjectSection")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_work_object_section_execution_tasks");

                    b.Navigation("Project");

                    b.Navigation("WorkObjectSection");
                });

            modelBuilder.Entity("Adis.Dm.Project", b =>
                {
                    b.HasOne("Adis.Dm.Contractor", "Contractor")
                        .WithMany("Projects")
                        .HasForeignKey("IdContractor")
                        .HasConstraintName("fk_projects_constractor");

                    b.HasOne("Adis.Dm.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_projects_user");

                    b.HasOne("Adis.Dm.WorkObject", "WorkObject")
                        .WithMany("Projects")
                        .HasForeignKey("IdWorkObject")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_work_object_project");

                    b.Navigation("Contractor");

                    b.Navigation("User");

                    b.Navigation("WorkObject");
                });

            modelBuilder.Entity("Adis.Dm.ProjectTask", b =>
                {
                    b.HasOne("Adis.Dm.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("IdProject")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_project_tasks");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Adis.Dm.RefreshToken", b =>
                {
                    b.HasOne("Adis.Dm.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Adis.Dm.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Adis.Dm.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Adis.Dm.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Adis.Dm.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Adis.Dm.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Adis.Dm.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("users_check_tasks", b =>
                {
                    b.HasOne("Adis.Dm.ProjectTask", null)
                        .WithMany()
                        .HasForeignKey("id_task")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_check_tasks");

                    b.HasOne("Adis.Dm.User", null)
                        .WithMany()
                        .HasForeignKey("id_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_check_tasks");
                });

            modelBuilder.Entity("users_execute_tasks", b =>
                {
                    b.HasOne("Adis.Dm.ProjectTask", null)
                        .WithMany()
                        .HasForeignKey("id_task")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_execute_tasks");

                    b.HasOne("Adis.Dm.User", null)
                        .WithMany()
                        .HasForeignKey("id_user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_execute_tasks");
                });

            modelBuilder.Entity("Adis.Dm.Contractor", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Adis.Dm.Project", b =>
                {
                    b.Navigation("ExecutionTasks");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Adis.Dm.ProjectTask", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Adis.Dm.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Documents");

                    b.Navigation("Projects");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Adis.Dm.WorkObject", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Adis.Dm.WorkObjectSection", b =>
                {
                    b.Navigation("ExecutionTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
