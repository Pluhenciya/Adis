name: CI/CD Pipeline

on:
  push:
    branches: [ "dev", "master" ]
  pull_request:
    branches: [ "dev", "master" ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ${{ github.repository }}_backend
  FRONTEND_IMAGE: ${{ github.repository }}_frontend

jobs:
  build-and-test:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.4
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DEV_MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DEV_MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.DEV_MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.DEV_MYSQL_PASSWORD }}
        ports:
          - "3306:3306"
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: ${{ runner.os }}-buildx-

    - name: Build backend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Adis.Api/Dockerfile
        tags: ${{ env.BACKEND_IMAGE }}:dev-${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        secrets: |
          "JWT__Key=${{ secrets.DEV_JWT_KEY }}"

    - name: Build frontend
      uses: docker/build-push-action@v5
      with:
        context: ./adis.client
        file: Dockerfile
        tags: ${{ env.FRONTEND_IMAGE }}:dev-${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Start containers
      run: |
        docker-compose -f docker-compose.ci.yml up -d
        ./scripts/wait-for-it.sh mysql:3306 --timeout=30

    - name: Run backend tests
      run: |
        docker-compose -f docker-compose.ci.yml exec backend dotnet test

  deploy-production:
    if: github.ref == 'refs/heads/master'
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: http://92.255.104.183/

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Adis.Api/Dockerfile
        tags: |
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
        push: true
        secrets: |
          "JWT__Key=${{ secrets.PROD_JWT_KEY }}"

    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: ./adis.client
        file: Dockerfile
        tags: |
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
        push: true

    - name: Deploy to production
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.PROD_SERVER_HOST }}
        username: ${{ secrets.PROD_SERVER_USERNAME }}
        key: ${{ secrets.PROD_SERVER_SSH_KEY }}
        script: |
          cd /opt/adis
          echo "PROD_MYSQL_PASSWORD=${{ secrets.PROD_MYSQL_PASSWORD }}" >> .env.prod
          echo "JWT__Key=${{ secrets.PROD_JWT_KEY }}" >> .env.prod
          docker-compose pull
          docker-compose -f docker-compose.prod.yml up -d --force-recreate
          docker exec backend dotnet ef database update
          docker system prune -af
