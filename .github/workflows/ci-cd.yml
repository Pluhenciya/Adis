name: CI/CD Pipeline

on:
  push:
    branches: [ "dev", "master" ]
  pull_request:
    branches: [ "dev", "master" ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: adis-backend
  FRONTEND_IMAGE: adis-frontend

jobs:
  build-and-test:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Adis.Api/Dockerfile
        tags: ${{ env.BACKEND_IMAGE }}:dev-${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        secrets: |
          "JWT__Key=${{ secrets.DEV_JWT_KEY }}"
        load: true

    - name: Build frontend
      uses: docker/build-push-action@v5
      with:
        context: ./adis.client
        file: ./adis.client/Dockerfile
        tags: ${{ env.FRONTEND_IMAGE }}:dev-${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        load: true

    - name: Start containers
      run: |
        # Создаем .env файл с необходимыми переменными
        cat <<EOF > .env
        MYSQL_ROOT_PASSWORD=${{ secrets.DEV_MYSQL_ROOT_PASSWORD }}
        MYSQL_DATABASE=${{ secrets.DEV_MYSQL_DATABASE }}
        MYSQL_USER=${{ secrets.DEV_MYSQL_USER }}
        MYSQL_PASSWORD=${{ secrets.DEV_MYSQL_PASSWORD }}
        IMAGE_TAG=dev-${{ github.sha }}
        BACKEND_IMAGE=${{ env.BACKEND_IMAGE }}
        FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }}
        EOF
        
        # Проверяем созданный файл
        cat .env
        
        docker compose -f docker-compose.ci.yml down -v
        docker compose --env-file .env -f docker-compose.ci.yml up -d --build
    
        # Ожидание готовности MySQL
        timeout 600s bash -c '
          while ! docker compose -f docker-compose.ci.yml exec mysql \
            mysqladmin ping -uroot -p${{ secrets.DEV_MYSQL_ROOT_PASSWORD }};
          do
            sleep 10;
            echo "MySQL status: $(docker compose -f docker-compose.ci.yml ps mysql)";
          done'
    
        # Ожидание миграций
        timeout 1200s bash -c '
          until docker compose -f docker-compose.ci.yml logs backend | grep "Database initialization completed";
          do
            sleep 20;
            echo "Migration status:";
            docker compose -f docker-compose.ci.yml logs backend --tail=50 | grep "Database";
          done'

    - name: Run backend tests
      run: |
        # Ожидание готовности backend с выводом логов
        timeout 600s bash -c '
          while ! docker compose -f docker-compose.ci.yml logs backend | grep -q "Application started";
          do
            sleep 10;
            echo "Backend status: $(docker compose -f docker-compose.ci.yml ps backend)";
            echo "Last logs:";
            docker compose -f docker-compose.ci.yml logs backend --tail=20;
          done'
        
        # Запуск тестов
        docker compose -f docker-compose.ci.yml exec backend dotnet test

  deploy-production:
    if: github.ref == 'refs/heads/master'
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: http://92.255.104.183/

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Adis.Api/Dockerfile
        tags: |
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
        push: true
        secrets: |
          "JWT__Key=${{ secrets.PROD_JWT_KEY }}"

    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: ./adis.client
        file: ./adis.client/Dockerfile
        tags: |
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
        push: true

    - name: Deploy to production
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.PROD_SERVER_HOST }}
        username: ${{ secrets.PROD_SERVER_USERNAME }}
        key: ${{ secrets.PROD_SERVER_SSH_KEY }}
        script: |
          cd /opt/adis
          echo "PROD_MYSQL_PASSWORD=${{ secrets.PROD_MYSQL_PASSWORD }}" > .env.prod
          echo "JWT__Key=${{ secrets.PROD_JWT_KEY }}" >> .env.prod
          docker compose -f docker-compose.yml down
          docker compose -f docker-compose.yml pull
          docker compose -f docker-compose.yml up -d --force-recreate
          docker system prune -af --volumes
