name: CI/CD Pipeline

on:
  push:
    branches: [ "dev", "master" ]
  pull_request:
    branches: [ "dev", "master" ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: pluhenciya/adis-backend
  FRONTEND_IMAGE: pluhenciya/adis-frontend

jobs:
  build-and-test:
    if: |
      github.event_name == 'pull_request' || 
      github.ref == 'refs/heads/dev' || 
      github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Adis.Api/Dockerfile
        tags: ${{ env.BACKEND_IMAGE }}:dev-${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        secrets: |
          "JWT__Key=${{ secrets.DEV_JWT_KEY }}"
        load: true

    - name: Build frontend
      uses: docker/build-push-action@v5
      with:
        context: ./adis.client
        file: ./adis.client/Dockerfile
        tags: ${{ env.FRONTEND_IMAGE }}:dev-${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        load: true

    - name: Start containers
      run: |
        echo "MYSQL_ROOT_PASSWORD=${{ secrets.DEV_MYSQL_ROOT_PASSWORD }}" > .env
        echo "MYSQL_DATABASE=${{ secrets.DEV_MYSQL_DATABASE }}" >> .env
        echo "MYSQL_USER=${{ secrets.DEV_MYSQL_USER }}" >> .env
        echo "MYSQL_PASSWORD=${{ secrets.DEV_MYSQL_PASSWORD }}" >> .env
        echo "IMAGE_TAG=dev-${{ github.sha }}" >> .env
        echo "BACKEND_IMAGE=${{ env.BACKEND_IMAGE }}" >> .env
        echo "FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }}" >> .env

        # Проверяем содержимое .env
        cat .env
        
        docker compose -f docker-compose.ci.yml down -v
        docker compose --env-file .env -f docker-compose.ci.yml up -d --build

  deploy-production:
    if: github.event_name == 'pull_request' && github.base_ref == 'master'
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    environment: 
      name: production
      url: http://92.255.104.183/

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Adis.Api/Dockerfile
        tags: |
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
        push: true
        secrets: |
          "JWT__Key=${{ secrets.PROD_JWT_KEY }}"

    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: ./adis.client
        file: ./adis.client/Dockerfile
        tags: |
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
        push: true

    - name: Copy files to server
      uses: appleboy/scp-action@v1
      with:
        host: ${{ secrets.PROD_SERVER_HOST }}
        username: ${{ secrets.PROD_SERVER_USERNAME }}
        key: ${{ secrets.PROD_SERVER_SSH_KEY }}
        source: "./"
        target: "/opt/adis"

    - name: Deploy to production
      timeout-minutes: 60
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.PROD_SERVER_HOST }}
        username: ${{ secrets.PROD_SERVER_USERNAME }}
        key: ${{ secrets.PROD_SERVER_SSH_KEY }}
        script: |
          cd /opt/adis
          
          echo "ConnectionStrings__DefaultConnection=server=mysql;port=3306;user=root;password=${{ secrets.PROD_MYSQL_ROOT_PASSWORD }};database=${{ secrets.PROD_MYSQL_DATABASE }}" > environment/default.env
          echo "JWT__Issuer=localhost:5221" >> environment/default.env
          echo "JWT__Audience=your-localhost:5221" >> environment/default.env
          echo "JWT__Key=${{ secrets.PROD_JWT_KEY }}" >> environment/default.env
          echo "ASPNETCORE_ENVIRONMENT=Development" >> environment/default.env
          echo "ASPNETCORE_URLS=http://+:8080" >> environment/default.env
          echo "AdminSettings__Email=${{ secrets.PROD_ADMIN_EMAIL }}" >> environment/default.env
          echo "AdminSettings__Password=${{ secrets.PROD_ADMIN_PASSWORD }}" >> environment/default.env
          echo "Ollama__OllamaUrl=http://ollama:11434/api" >> environment/default.env
          echo "Ollama__EmbeddingModel=nomic-embed-text" >> environment/default.env
          echo "Ollama__LlmModel=qwen3:1.7b" >> environment/default.env
          echo "APP_UID=0" >> environment/default.env

          echo "MYSQL_ROOT_PASSWORD=${{ secrets.PROD_MYSQL_ROOT_PASSWORD }}" > environment/mysql.env
          echo "MYSQL_DATABASE=${{ secrets.PROD_MYSQL_DATABASE }}" >> environment/mysql.env
          echo "MYSQL_USER=${{ secrets.PROD_MYSQL_USER }}" >> environment/mysql.env
          echo "MYSQL_PASSWORD=${{ secrets.PROD_MYSQL_PASSWORD }}" >> environment/mysql.env

          echo "YANDEX_MAPS_API_KEY=${{ secrets.YANDEX_MAPS_API_KEY }}" > environment/frontend.env
          
          docker compose -f docker-compose.yml down
          docker compose -f docker-compose.yml pull
          docker compose -f docker-compose.yml up -d
          docker system prune -af --volumes
